Index: app/src/main/java/com/example/connection/View/Connection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.connection.View;\r\n\r\nimport android.Manifest;\r\nimport android.content.ComponentName;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.net.VpnService;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.StrictMode;\r\nimport android.provider.Settings;\r\nimport android.text.TextUtils;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.example.connection.Bluetooth.BluetoothAdvertiser;\r\nimport com.example.connection.Bluetooth.BluetoothScanner;\r\nimport com.example.connection.Controller.AutoClicker;\r\nimport com.example.connection.Controller.ChatController;\r\nimport com.example.connection.Controller.ConnectionController;\r\nimport com.example.connection.Controller.Database;\r\nimport com.example.connection.Controller.Task;\r\nimport com.example.connection.Model.MapUsers;\r\nimport com.example.connection.Model.User;\r\nimport com.example.connection.R;\r\nimport com.example.connection.vpn.LocalVPNService;\r\n\r\nimport java.net.UnknownHostException;\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\n\r\npublic class Connection extends AppCompatActivity {\r\n    private Fragment fragment;\r\n    private CountDownTimer countDownTimer;\r\n    private Boolean startTimer = false;\r\n    private Boolean startTimer2 = true;\r\n    private long secondsRemaining = 1000;\r\n    private SharedPreferences sharedPreferences;\r\n    public static boolean boot = true;\r\n    Database database;\r\n    User user;\r\n    ChatController chatController;\r\n    private static final int PERMISSIONS_REQUEST_CODE_ACCESS_FINE_LOCATION = 1001;\r\n    ConnectionController connectionController;\r\n    public static String fragmentName = \"MAP\";\r\n    public static String lightOrDark = \"light\";\r\n    public static ArrayList<MapUsers> mapUsers = new ArrayList<MapUsers>();\r\n    public static String minAge = \"\", maxAge = \"\";\r\n    public static String[] genders = {\"\", \"\", \"\"};\r\n    private Fragment map, chat, settings;\r\n    private static final int VPN_REQUEST_CODE = 0x0F;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\r\n        StrictMode.setThreadPolicy(policy);\r\n        sharedPreferences = getSharedPreferences(\"settings\", Context.MODE_PRIVATE);\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        database = new Database(this);\r\n        boolean createSample = false;\r\n        if (createSample) {\r\n            database.addUser(\"0\", \"192.168.49.20\", \"Andrew00\", \"andrew@gmail.com\", \"male\", \"Andrew\", \"Wand\", \"England\", \"London\", \"23-03-1997\", \"/photo\",\"\");\r\n            database.addUser(\"2\", \"192.168.49.20\", \"Andrew1\", \"andrew@gmail.com\", \"male\", \"Andrew2\", \"Wand\", \"England\", \"London\", \"23-03-1997\", \"/photo\",\"\");\r\n            database.createChat(\"2\", \"Andrew2\");\r\n            database.addMsg(\"Ciao\", \"2\", \"2\");\r\n            database.addMsg(\"WeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeWeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0\", \"2\");\r\n            database.addMsg(\"we\", \"0\", \"2\");\r\n            database.addUser(\"23\", \"192.168.49.20\", \"Andrew123\", \"andrew@12gmail.com\", \"ma123le\", \"Andr1ew2\", \"Wa131nd\", \"England\", \"London\", \"23-03-1997\", \"/photo\",\"\");\r\n            database.createChat(\"23\", \"Andrew123\");\r\n            database.addMsg(\"Ciao\", \"23\", \"23\");\r\n            database.addUser(\"25\", \"192.168.49.20\", \"Andrew345\", \"andrew@12gmail.com\", \"ma123le\", \"Andr1ew2\", \"Wa131nd\", \"England\", \"London\", \"23-03-1997\", \"/photo\",\"\");\r\n            database.createChat(\"25\", \"Andrew345\");\r\n            database.addMsg(\"wee\", \"25\", \"25\");\r\n        }\r\n        String[] info=database.getMyInformation();\r\n        user=new User(info[0],info[1],info[2],info[3],info[4],info[5],info[6],info[7],info[8],info[9],info[10],info[11]);\r\n\r\n        connectionController = new ConnectionController(this, database, user);\r\n        chatController = new ChatController();\r\n        chatController = chatController.newIstance(this, connectionController);\r\n        //LocalizationController localizationController=null;\r\n        // localizationController=new LocalizationController(database,this);\r\n        //autoClicker=new AutoClicker();\r\n        loadTheme();\r\n        requestStoragePermission();\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        fragment = new SplashScreenFragment();\r\n        loadFragment(false);\r\n\r\n        //ADD PERMISSIONS THAT WILL BE REQUIRED ON THE ARRAY BELOW\r\n        final String[] permissions = new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.ACCESS_FINE_LOCATION};\r\n        ActivityCompat.requestPermissions(this, permissions, 101);\r\n       if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED || checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED || checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED ) {\r\n        }\r\n\r\n        String manufacturer = \"xiaomi\";\r\n        if (manufacturer.equalsIgnoreCase(android.os.Build.MANUFACTURER)) {\r\n            //this will open auto start screen where user can enable permission for your app\r\n            Intent intent1 = new Intent();\r\n            intent1.setComponent(new ComponentName(\"com.miui.securitycenter\", \"com.miui.permcenter.permissions.AppPermissionsTabActivity\"));\r\n            startActivity(intent1);\r\n        }\r\n\r\n        //ENDS PERMISSIONS REQUEST\r\n        createCountDowntimer();\r\n        countDownTimer.start();\r\n        map = new MapFragment().newInstance(connectionController, database);\r\n        chat = new ChatFragment().newInstance(database, chatController,null);\r\n        settings = new SettingsFragment().newInstance(connectionController, database, chatController, map, chat);\r\n        connectionController.active4G();\r\n        connectionController.removeGroup();\r\n        connectionController.initProcess();\r\n\r\n\r\n        //connectionController.initProcess();\r\n    }\r\n\r\n    private void loadTheme() {\r\n        String theme = sharedPreferences.getString(\"appTheme\", \"light\");\r\n        if (theme.equals(\"light\")) {\r\n            lightOrDark = \"Light\";\r\n            setTheme(R.style.AppTheme);\r\n            setStatusAndNavbarColor(true);\r\n        } else if (theme.equals(\"dark\")) {\r\n            lightOrDark = \"Dark\";\r\n            setTheme(R.style.DarkTheme);\r\n            setStatusAndNavbarColor(false);\r\n        } else {\r\n            int nightModeFlags = getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n            switch (nightModeFlags) {\r\n                case Configuration.UI_MODE_NIGHT_NO:\r\n                case Configuration.UI_MODE_NIGHT_UNDEFINED:\r\n                    lightOrDark = \"Follow System\";\r\n                    setTheme(R.style.AppTheme);\r\n                    setStatusAndNavbarColor(true);\r\n                    break;\r\n                case Configuration.UI_MODE_NIGHT_YES:\r\n                    lightOrDark = \"Follow System\";\r\n                    setTheme(R.style.DarkTheme);\r\n                    setStatusAndNavbarColor(false);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private void setStatusAndNavbarColor(boolean light) {\r\n\r\n        Window window = getWindow();\r\n        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\r\n        if (light) {\r\n            window.setStatusBarColor(getColor(R.color.colorPrimaryDark));\r\n            window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\r\n        } else {\r\n            window.setStatusBarColor(getColor(R.color.darkColorPrimaryDark));\r\n        }\r\n        window.setNavigationBarColor(Color.BLACK);\r\n    }\r\n\r\n    private void loadFragment(boolean transition) {\r\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n        if (transition) {\r\n            transaction.setCustomAnimations(android.R.anim.fade_in, android.R.anim.fade_out);\r\n        }\r\n        transaction.replace(R.id.main_fragment, fragment);\r\n        transaction.commit();\r\n    }\r\n\r\n    private void createCountDowntimer() {\r\n        countDownTimer = new CountDownTimer(secondsRemaining, 1000) {\r\n            @Override\r\n            public void onTick(long millisUntilFinished) {\r\n                secondsRemaining = millisUntilFinished;\r\n            }\r\n\r\n            @Override\r\n            public void onFinish() {\r\n                if(firstLogin()) {\r\n                    fragment = new LoginFragment().newInstance(connectionController, database, chatController, map, chat, settings);\r\n                }else {\r\n                    fragment = new HomeFragment().newInstance(connectionController, database, chatController,map,chat);\r\n                }\r\n                loadFragment(true);\r\n                startTimer2 = false;\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        if (startTimer && startTimer2) {\r\n            createCountDowntimer();\r\n            countDownTimer.start();\r\n        }\r\n        registerReceiver(connectionController.getmReceiver(), connectionController.getmIntentFilter());\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        unregisterReceiver(connectionController.getmReceiver());\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        countDownTimer.cancel();\r\n        startTimer = true;\r\n        System.out.println(\"Activity in stop\");\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        System.out.println(\"Activity distrutta\");\r\n    }\r\n\r\n    public boolean isAccessibilityEnabled() {\r\n        int accessibilityEnabled = 0;\r\n        boolean accessibilityFound = false;\r\n        try {\r\n            accessibilityEnabled = Settings.Secure.getInt(this.getContentResolver(), android.provider.Settings.Secure.ACCESSIBILITY_ENABLED);\r\n        } catch (Settings.SettingNotFoundException e) {\r\n        }\r\n\r\n        TextUtils.SimpleStringSplitter mStringColonSplitter = new TextUtils.SimpleStringSplitter(':');\r\n\r\n        if (accessibilityEnabled == 1) {\r\n            System.out.println(\"***ACCESSIBILIY IS ENABLED***: \");\r\n\r\n            String settingValue = Settings.Secure.getString(getContentResolver(), Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);\r\n            if (settingValue != null) {\r\n                TextUtils.SimpleStringSplitter splitter = mStringColonSplitter;\r\n                splitter.setString(settingValue);\r\n                while (splitter.hasNext()) {\r\n                    String accessabilityService = splitter.next();\r\n                    if (accessabilityService.equalsIgnoreCase(\"ACCESSIBILITY_SERVICE_NAME\")) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n            System.out.println(\"***ACCESSIBILIY IS DISABLED***\");\r\n\r\n\r\n        }\r\n        return accessibilityFound;\r\n    }\r\n\r\n    private void requestStoragePermission() {\r\n        if (ActivityCompat.shouldShowRequestPermissionRationale(Objects.requireNonNull(this), Manifest.permission.READ_EXTERNAL_STORAGE)) {\r\n            ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);\r\n        } else {\r\n            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);\r\n        }\r\n    }\r\n\r\n    public boolean firstLogin(){\r\n        String myid=\"\";\r\n        try {\r\n            myid = database.getUser(\"0\").getString(0);\r\n        }catch(IndexOutOfBoundsException e){\r\n            System.out.println(\"Utente non trovato\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == VPN_REQUEST_CODE && resultCode == RESULT_OK) {\r\n            //waitingForVPNStart = true;\r\n            this.startService(new Intent(this, LocalVPNService.class));\r\n            //enableButton(false);\r\n        }\r\n    }\r\n    public  void startVpn() {\r\n\r\n        Intent vpnIntent = VpnService.prepare(this);\r\n\r\n        if (vpnIntent != null)\r\n            this.startActivityForResult(vpnIntent, VPN_REQUEST_CODE);\r\n        else\r\n            onActivityResult(VPN_REQUEST_CODE, RESULT_OK, null);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/connection/View/Connection.java	(revision 65a566ec6af2fd3ebf393aef273104720df55071)
+++ app/src/main/java/com/example/connection/View/Connection.java	(date 1613161149641)
@@ -124,8 +124,6 @@
         connectionController.removeGroup();
         connectionController.initProcess();
 
-
-        //connectionController.initProcess();
     }
 
     private void loadTheme() {
@@ -209,13 +207,13 @@
             createCountDowntimer();
             countDownTimer.start();
         }
-        registerReceiver(connectionController.getmReceiver(), connectionController.getmIntentFilter());
+
     }
 
     @Override
     protected void onPause() {
         super.onPause();
-        unregisterReceiver(connectionController.getmReceiver());
+
     }
 
     @Override
Index: app/src/main/java/com/example/connection/Controller/ConnectionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.connection.Controller;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.IntentFilter;\r\nimport android.database.Cursor;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Network;\r\nimport android.net.NetworkCapabilities;\r\nimport android.net.NetworkInfo;\r\nimport android.net.NetworkRequest;\r\nimport android.net.wifi.WifiConfiguration;\r\nimport android.net.wifi.WifiInfo;\r\nimport android.net.wifi.WifiManager;\r\nimport android.net.wifi.WifiNetworkSuggestion;\r\nimport android.net.wifi.p2p.WifiP2pConfig;\r\nimport android.net.wifi.p2p.WifiP2pManager;\r\nimport android.os.CountDownTimer;\r\nimport android.text.format.Formatter;\r\n\r\nimport com.example.connection.Bluetooth.BluetoothAdvertiser;\r\nimport com.example.connection.Bluetooth.BluetoothScanner;\r\nimport com.example.connection.Device_Connection.ServiceConnections;\r\nimport com.example.connection.Model.User;\r\nimport com.example.connection.TCP_Connection.TCP_Client;\r\nimport com.example.connection.UDP_Connection.Multicast;\r\nimport com.example.connection.UDP_Connection.Multicast_P2P;\r\nimport com.example.connection.UDP_Connection.Multicast_WLAN;\r\nimport com.example.connection.View.Connection;\r\nimport com.example.connection.View.WiFiDirectBroadcastReceiver;\r\n\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Optional;\r\n\r\nimport static android.net.ConnectivityManager.*;\r\n\r\npublic class\r\nConnectionController {\r\n\r\n    private String SSID = \"DIRECT-CONNEXION\", networkPassword = \"12345678\";\r\n    private WifiManager wifiManager;\r\n    private Connection connection;\r\n    private WifiP2pManager mManager;\r\n    private WifiP2pManager.Channel mChannel;\r\n    private WifiP2pConfig mConfig;\r\n    private Multicast_P2P multicastP2P;\r\n    private Multicast_WLAN multicastWLAN;\r\n    private TCP_Client tcpClient;\r\n    private BroadcastReceiver wifiScanReceiver;\r\n    private IntentFilter intentFilter;\r\n    private User user;\r\n    private Database database;\r\n    private HashMap<String, String> macAdresses;\r\n    private WifiP2pManager.PeerListListener peerListListener;\r\n    private BroadcastReceiver mReceiver;\r\n    private IntentFilter mIntentFilter;\r\n    private WifiP2pManager.ConnectionInfoListener connectionInfoListener;\r\n    private ServiceConnections serviceConnection;\r\n    private BluetoothScanner bluetoothScanner;\r\n    private BluetoothAdvertiser bluetoothAdvertiser;\r\n    private int netId;\r\n    private String myId;\r\n    private ConnectivityManager connManager;\r\n    private NetworkInfo mWifi;\r\n    private NetworkRequest networkRequest;\r\n    public static Network mMobileNetwork;\r\n\r\n    public ConnectionController(Connection connection, Database database, User user) {\r\n        this.connection = connection;\r\n        mManager = (WifiP2pManager) connection.getSystemService(Context.WIFI_P2P_SERVICE);\r\n        mChannel = mManager.initialize(connection, connection.getMainLooper(), null);\r\n        this.database = database;\r\n        this.user = user;\r\n        multicastP2P= new Multicast_P2P(user, database, this);\r\n        multicastWLAN= new Multicast_WLAN(user, database, this);\r\n        tcpClient = new TCP_Client();\r\n        wifiManager = (WifiManager) connection.getSystemService(Context.WIFI_SERVICE);\r\n        intentFilter = new IntentFilter();\r\n        intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);\r\n        connection.registerReceiver(wifiScanReceiver, intentFilter);\r\n        macAdresses = new HashMap<>();\r\n        mReceiver = new WiFiDirectBroadcastReceiver(mManager, mChannel, peerListListener, connectionInfoListener);\r\n        mIntentFilter = new IntentFilter();\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\r\n        serviceConnection = new ServiceConnections(mManager, mChannel, database);\r\n        bluetoothAdvertiser = new BluetoothAdvertiser();\r\n        bluetoothScanner = new BluetoothScanner(connection, database, this, bluetoothAdvertiser);\r\n        myId = database.getMyInformation()[0];\r\n        mConfig = new WifiP2pConfig.Builder()\r\n                .setNetworkName(SSID + myId)\r\n                .setPassphrase(networkPassword)\r\n                .setGroupOperatingBand(WifiP2pConfig.GROUP_OWNER_BAND_2GHZ)\r\n                .enablePersistentMode(false)\r\n                .build();\r\n        connManager = (ConnectivityManager) connection.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n         networkRequest=new NetworkRequest.Builder()\r\n                 .addTransportType(NetworkCapabilities.TRANSPORT_WIFI)\r\n                 .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)\r\n                 .build();\r\n\r\n        mWifi = connManager.getNetworkInfo(TYPE_WIFI);\r\n    }\r\n\r\n    //Remove a group --------------------------------------------------------------------------------------------------------------------------------\r\n    public void removeGroup() {\r\n        bluetoothAdvertiser.stopAdvertising();\r\n        mManager.removeGroup(mChannel, null);\r\n    }\r\n\r\n    //Create a group --------------------------------------------------------------------------------------------------------------------------------\r\n    @SuppressLint(\"MissingPermission\")\r\n    public void createGroup() {\r\n        mManager.createGroup(mChannel, mConfig, new WifiP2pManager.ActionListener() {\r\n\r\n            @Override\r\n            public void onSuccess() {\r\n                bluetoothAdvertiser.stopAdvertising();\r\n                bluetoothAdvertiser.setAdvertiseData(myId, Task.ServiceEntry.serviceGroupOwner, myId);\r\n                bluetoothAdvertiser.startAdvertising();\r\n                wifiManager.disconnect();\r\n                try {\r\n                    user.setInetAddress(\"192.168.49.1\");\r\n                } catch (UnknownHostException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                multicastP2P.createMultigroupP2P();\r\n                Thread t1 = new Thread(multicastP2P);\r\n                t1.start();\r\n                bluetoothScanner.initScan(Task.ServiceEntry.serviceLookingForGroupOwnerWithGreaterId);\r\n                //udpClient.createMulticastSocketWlan0();//TO SEE IF IT WORKS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(int reason) {\r\n                System.out.println(\"ciao\" + reason);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    //Connect to a group -----------------------------------------------------------------------------------------------------------------------------------\r\n    public void connectToGroupWhenGroupOwner(String id) {//GroupOwner groupOwner){//\r\n        wifiConnection(id);\r\n        // udpClient.sendInfo(); Creare un sendAllMyGroupInfo\r\n    }\r\n\r\n    //Connect to a group -----------------------------------------------------------------------------------------------------------------------------------\r\n    public void connectToGroup(String id) {//GroupOwner groupOwner){//\r\n        wifiConnection(id);\r\n        bluetoothAdvertiser.stopAdvertising();\r\n        bluetoothAdvertiser.setAdvertiseData(myId, Task.ServiceEntry.serviceClientConnectedToGroupOwner, id);\r\n        bluetoothAdvertiser.stopAdvertising();\r\n\r\n        connManager.requestNetwork(networkRequest,new NetworkCallback(){\r\n            @Override\r\n            public void onAvailable(Network network) {\r\n                try {\r\n                    String ip = Formatter.formatIpAddress(wifiManager.getConnectionInfo().getIpAddress());\r\n                    System.out.println(ip);\r\n                    user.setInetAddress(ip);\r\n                } catch (UnknownHostException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                multicastWLAN.createMulticastSocketWlan0();\r\n                multicastWLAN.sendInfo();\r\n                bluetoothScanner.initScan(Task.ServiceEntry.serviceClientConnectedToGroupOwner);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //Disconnected to a group --------------------------------------------------------------------------------------------------------------------------------\r\n    public void disconnectToGroup() {\r\n        wifiManager.disconnect();\r\n        wifiManager.removeNetwork(netId);\r\n        //udpClient.imLeaving();\r\n    }\r\n\r\n    //measure the power connection between me and the group owner --------------------------------------------------------------------------------------------------------------------------------\r\n    public void clientList() {\r\n        int numberOfLevels = 5;\r\n        WifiInfo wifiInfo = wifiManager.getConnectionInfo();\r\n        int level = WifiManager.calculateSignalLevel(wifiInfo.getRssi(), numberOfLevels);\r\n        if (level <= 2) {\r\n            disconnectToGroup();\r\n        }\r\n    }\r\n\r\n    //The group owner is leaving the group :( --------------------------------------------------------------------------------------------------------------------------------\r\n    public void GOLeaves() {\r\n        final String maxId = database.getMaxId();\r\n\r\n        tcpClient.startConnection(database.findIp(maxId), 50000);\r\n        tcpClient.sendMessage(\"GO_LEAVES_BY£€\", \"\");\r\n        new CountDownTimer(10000, 1000) {\r\n\r\n            public void onTick(long millisUntilFinished) {\r\n            }\r\n\r\n            public void onFinish() {\r\n            }\r\n        }.start();\r\n        this.removeGroup();\r\n\r\n    }\r\n\r\n    public void broadcastNewGroupOwnerId() {\r\n        multicastP2P.sendGlobalMsg(\"GO_LEAVES_BYE£€\".concat(database.getMyInformation()[0]));\r\n    }\r\n\r\n    //return the all client list --------------------------------------------------------------------------------------------------------------------------------\r\n    public Optional<Cursor> getAllClientList() {\r\n\r\n        return Optional.of(database.getAllUsers());\r\n\r\n    }\r\n\r\n    public BroadcastReceiver getmReceiver() {\r\n        return mReceiver;\r\n    }\r\n\r\n    public IntentFilter getmIntentFilter() {\r\n        return mIntentFilter;\r\n    }\r\n\r\n\r\n    public void initProcess() {\r\n        bluetoothAdvertiser.setAdvertiseData(myId, Task.ServiceEntry.serviceLookingForGroupOwner, null);\r\n        bluetoothAdvertiser.startAdvertising();\r\n        bluetoothScanner.initScan(Task.ServiceEntry.serviceLookingForGroupOwner);\r\n    }\r\n\r\n    public void active4G() {\r\n        final ConnectivityManager connectivityManager = (ConnectivityManager) connection.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkRequest.Builder req = new NetworkRequest.Builder();\r\n        req.addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);\r\n        req.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);\r\n        NetworkRequest networkRequest = req.build();\r\n        NetworkCallback networkCallback = new\r\n                NetworkCallback() {\r\n\r\n                    @Override\r\n                    public void onAvailable(Network network) {\r\n                        mMobileNetwork = network;\r\n                        connectivityManager.bindProcessToNetwork(network);\r\n                        connection.startVpn();\r\n                    }\r\n                };\r\n        connectivityManager.requestNetwork(networkRequest, networkCallback);\r\n    }\r\n\r\n    //GROUP OWNER IS LEAVING SO I NEED TO CONNECT TO ANOTHER ONE, WHICH ID WAS GIVEN TO ME\r\n    public void connectToGroupOwnerId(String id) {\r\n        bluetoothScanner.setClientToRequestGroupId(id);\r\n        bluetoothScanner.initScan(Task.ServiceEntry.serviceLookingForGroupOwnerWithSpecifiedId);\r\n    }\r\n\r\n    //TESTING DISCONNECTION\r\n\r\n    private ArrayList<WifiNetworkSuggestion> sugg;\r\n\r\n    public void wifiConnection(String id) {\r\n\r\n        WifiConfiguration wifiConfig = new WifiConfiguration();\r\n        wifiConfig.SSID = String.format(\"\\\"%s\\\"\", SSID + id);\r\n        wifiConfig.preSharedKey = String.format(\"\\\"%s\\\"\", networkPassword);\r\n//remember id\r\n        netId = wifiManager.addNetwork(wifiConfig);\r\n        wifiManager.disconnect();\r\n        wifiManager.enableNetwork(netId, true);\r\n        wifiManager.reconnect();\r\n        /*\r\n        WifiNetworkSuggestion suggestion = new WifiNetworkSuggestion.Builder()\r\n                .setSsid(SSID + id)\r\n                .setWpa2Passphrase(networkPassword)\r\n                .build();\r\n        sugg = new ArrayList<>();\r\n        sugg.add(suggestion);\r\n        int status = wifiManager.addNetworkSuggestions(sugg);\r\n        System.out.println(status);\r\n        if (status != WifiManager.STATUS_NETWORK_SUGGESTIONS_SUCCESS) {\r\n\r\n        }*/\r\n    }\r\n\r\n}\r\n\r\n/*\r\n    public String getMacAddr() {\r\n        try {\r\n            List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());\r\n            for (NetworkInterface nif : all) {\r\n                if (!nif.getName().equalsIgnoreCase(\"p2p0\")) continue;\r\n\r\n                byte[] macBytes = nif.getHardwareAddress();\r\n                if (macBytes == null) {\r\n                    return null;\r\n                }\r\n\r\n                StringBuilder res1 = new StringBuilder();\r\n                for (byte b : macBytes) {\r\n                    res1.append(Integer.toHexString(b & 0xFF) + \":\");\r\n                }\r\n\r\n                if (res1.length() > 0) {\r\n                    res1.deleteCharAt(res1.length() - 1);\r\n                }\r\n                return res1.toString();\r\n            }\r\n        } catch (Exception ex) {\r\n            //handle exception\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void MACSender(){\r\n        udpClient.sendGlobalMsg(\"GO_LEAVES_BYE£€\".concat(getMacAddr()));\r\n    }*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/connection/Controller/ConnectionController.java	(revision 65a566ec6af2fd3ebf393aef273104720df55071)
+++ app/src/main/java/com/example/connection/Controller/ConnectionController.java	(date 1613161149646)
@@ -79,17 +79,7 @@
         multicastWLAN= new Multicast_WLAN(user, database, this);
         tcpClient = new TCP_Client();
         wifiManager = (WifiManager) connection.getSystemService(Context.WIFI_SERVICE);
-        intentFilter = new IntentFilter();
-        intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
-        connection.registerReceiver(wifiScanReceiver, intentFilter);
         macAdresses = new HashMap<>();
-        mReceiver = new WiFiDirectBroadcastReceiver(mManager, mChannel, peerListListener, connectionInfoListener);
-        mIntentFilter = new IntentFilter();
-        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);
-        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);
-        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);
-        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);
-        serviceConnection = new ServiceConnections(mManager, mChannel, database);
         bluetoothAdvertiser = new BluetoothAdvertiser();
         bluetoothScanner = new BluetoothScanner(connection, database, this, bluetoothAdvertiser);
         myId = database.getMyInformation()[0];
@@ -224,13 +214,6 @@
 
     }
 
-    public BroadcastReceiver getmReceiver() {
-        return mReceiver;
-    }
-
-    public IntentFilter getmIntentFilter() {
-        return mIntentFilter;
-    }
 
 
     public void initProcess() {
