Index: app/src/main/java/com/example/connection/Controller/ConnectionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.connection.Controller;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.IntentFilter;\r\nimport android.database.Cursor;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Network;\r\nimport android.net.NetworkCapabilities;\r\nimport android.net.NetworkRequest;\r\nimport android.net.NetworkSpecifier;\r\nimport android.net.wifi.WifiConfiguration;\r\nimport android.net.wifi.WifiInfo;\r\nimport android.net.wifi.WifiManager;\r\nimport android.net.wifi.WifiNetworkSpecifier;\r\nimport android.net.wifi.WifiNetworkSuggestion;\r\nimport android.net.wifi.p2p.WifiP2pConfig;\r\nimport android.net.wifi.p2p.WifiP2pGroup;\r\nimport android.net.wifi.p2p.WifiP2pManager;\r\nimport android.os.CountDownTimer;\r\n\r\nimport com.example.connection.Bluetooth.BluetoothAdvertiser;\r\nimport com.example.connection.Bluetooth.BluetoothScanner;\r\nimport com.example.connection.Device_Connection.ServiceConnections;\r\nimport com.example.connection.Model.User;\r\nimport com.example.connection.Model.WifiConnection;\r\nimport com.example.connection.TCP_Connection.TCP_Client;\r\nimport com.example.connection.UDP_Connection.Multicast;\r\nimport com.example.connection.View.Connection;\r\nimport com.example.connection.View.WiFiDirectBroadcastReceiver;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic class\r\nConnectionController {\r\n\r\n    private String SSID = \"DIRECT-CONNEXION\", networkPassword = \"12345678\";\r\n    private WifiManager wifiManager;\r\n    private Connection connection;\r\n    private WifiP2pManager mManager;\r\n    private WifiP2pManager.Channel mChannel;\r\n    private WifiP2pConfig mConfig;\r\n    private Multicast udpClient;\r\n    private TCP_Client tcpClient;\r\n    private BroadcastReceiver wifiScanReceiver;\r\n    private IntentFilter intentFilter;\r\n    private User user;\r\n    private Database database;\r\n    private HashMap<String, String> macAdresses;\r\n    private WifiP2pManager.PeerListListener peerListListener;\r\n    private BroadcastReceiver mReceiver;\r\n    private IntentFilter mIntentFilter;\r\n    private WifiP2pManager.ConnectionInfoListener connectionInfoListener;\r\n    private ServiceConnections serviceConnection;\r\n    private BluetoothScanner bluetoothScanner;\r\n    private BluetoothAdvertiser bluetoothAdvertiser;\r\n    private int netId;\r\n    private String myId;\r\n\r\n    public static Network mMobileNetwork;\r\n\r\n    public ConnectionController(Connection connection, Database database, User user) {\r\n        this.connection = connection;\r\n        mManager = (WifiP2pManager) connection.getSystemService(Context.WIFI_P2P_SERVICE);\r\n        mChannel = mManager.initialize(connection, connection.getMainLooper(), null);\r\n        this.database = database;\r\n        this.user = user;\r\n        udpClient = new Multicast(user, database, this);\r\n        tcpClient = new TCP_Client();\r\n        wifiManager = (WifiManager) connection.getSystemService(Context.WIFI_SERVICE);\r\n        intentFilter = new IntentFilter();\r\n        intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);\r\n        connection.registerReceiver(wifiScanReceiver, intentFilter);\r\n        macAdresses = new HashMap<>();\r\n        mReceiver = new WiFiDirectBroadcastReceiver(mManager, mChannel, peerListListener, connectionInfoListener);\r\n        mIntentFilter = new IntentFilter();\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\r\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\r\n        serviceConnection = new ServiceConnections(mManager, mChannel, database);\r\n        bluetoothAdvertiser = new BluetoothAdvertiser();\r\n        bluetoothScanner = new BluetoothScanner(connection, database, this, bluetoothAdvertiser);\r\n        myId = database.getMyInformation()[0];\r\n        mConfig = new WifiP2pConfig.Builder()\r\n                .setNetworkName(SSID + myId)\r\n                .setPassphrase(networkPassword)\r\n                .setGroupOperatingBand(WifiP2pConfig.GROUP_OWNER_BAND_2GHZ)\r\n                .enablePersistentMode(false)\r\n                .build();\r\n    }\r\n\r\n    //Remove a group --------------------------------------------------------------------------------------------------------------------------------\r\n    public void removeGroup() {\r\n        mManager.removeGroup(mChannel, null);\r\n    }\r\n\r\n    //Create a group --------------------------------------------------------------------------------------------------------------------------------\r\n    @SuppressLint(\"MissingPermission\")\r\n    public void createGroup() {\r\n        mManager.createGroup(mChannel, mConfig, new WifiP2pManager.ActionListener() {\r\n\r\n            @Override\r\n            public void onSuccess() {\r\n                mManager.requestGroupInfo(mChannel, new WifiP2pManager.GroupInfoListener() {\r\n                    @Override\r\n                    public void onGroupInfoAvailable(WifiP2pGroup group) {\r\n                        //SSID=group.getNetworkName();\r\n                        //networkPassword =group.getPassphrase();\r\n                        // System.out.println(group.getNetworkName() + \" \" + group.getPassphrase());\r\n                    }\r\n                });\r\n                bluetoothAdvertiser.stopAdvertising();\r\n                bluetoothAdvertiser.setAdvertiseData(myId, Task.ServiceEntry.serviceGroupOwner, myId);\r\n                System.out.println(bluetoothAdvertiser.getData());\r\n                bluetoothAdvertiser.startAdvertising();\r\n                bluetoothScanner.initScan(Task.ServiceEntry.serviceLookingForGroupOwnerWithGreaterId);\r\n                //serviceConnection.registerService(Task.ServiceEntry.serviceGroupOwner,database.getMyInformation()[0],SSID,networkPassword);\r\n                //connectToGroup(bluetoothScanner.findOtherGroupOwner()[2]);\r\n                udpClient.createMulticastSocketWlan0();//TO SEE IF IT WORKS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(int reason) {\r\n                System.out.println(\"ciao\" + reason);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    //Connect to a group -----------------------------------------------------------------------------------------------------------------------------------\r\n    public void connectToGroupWhenGroupOwner(String id) {//GroupOwner groupOwner){//\r\n        new WifiConnection(SSID + id, networkPassword, wifiManager);\r\n        //udpClient.sendInfo(); Creare un sendAllMyGroupInfo\r\n    }\r\n\r\n    //Connect to a group -----------------------------------------------------------------------------------------------------------------------------------\r\n    public void connectToGroup(String id) {//GroupOwner groupOwner){//\r\n        wifiConnection(id);\r\n        /*bluetoothAdvertiser.stopAdvertising();\r\n        bluetoothAdvertiser.setAdvertiseData(myId, Task.ServiceEntry.serviceClientConnectedToGroupOwner, id);\r\n        bluetoothAdvertiser.stopAdvertising();\r\n        udpClient.sendInfo();\r\n        bluetoothScanner.initScan(Task.ServiceEntry.serviceClientConnectedToGroupOwner);*/\r\n    }\r\n\r\n    //Disconnected to a group --------------------------------------------------------------------------------------------------------------------------------\r\n    public void disconnectToGroup() {\r\n        wifiManager.disconnect();\r\n        wifiManager.removeNetwork(netId);\r\n        //udpClient.imLeaving();\r\n    }\r\n\r\n    //measure the power connection between me and the group owner --------------------------------------------------------------------------------------------------------------------------------\r\n    public void clientList() {\r\n        int numberOfLevels = 5;\r\n        WifiInfo wifiInfo = wifiManager.getConnectionInfo();\r\n        int level = WifiManager.calculateSignalLevel(wifiInfo.getRssi(), numberOfLevels);\r\n        if (level <= 2) {\r\n            disconnectToGroup();\r\n        }\r\n    }\r\n\r\n    //The group owner is leaving the group :( --------------------------------------------------------------------------------------------------------------------------------\r\n    public void GOLeaves() {\r\n        final String maxId = database.getMaxId();\r\n\r\n        tcpClient.startConnection(database.findIp(maxId), 50000);\r\n        tcpClient.sendMessage(\"GO_LEAVES_BY£€\", \"\");\r\n        new CountDownTimer(10000, 1000) {\r\n\r\n            public void onTick(long millisUntilFinished) {\r\n            }\r\n\r\n            public void onFinish() {\r\n            }\r\n        }.start();\r\n        this.removeGroup();\r\n\r\n    }\r\n\r\n    public void broadcastNewGroupOwnerId() {\r\n        udpClient.sendGlobalMsg(\"GO_LEAVES_BYE£€\".concat(database.getMyInformation()[0]));\r\n    }\r\n\r\n    //return the all client list --------------------------------------------------------------------------------------------------------------------------------\r\n    public Optional<Cursor> getAllClientList() {\r\n\r\n        return Optional.of(database.getAllUsers());\r\n\r\n    }\r\n\r\n    public BroadcastReceiver getmReceiver() {\r\n        return mReceiver;\r\n    }\r\n\r\n    public IntentFilter getmIntentFilter() {\r\n        return mIntentFilter;\r\n    }\r\n\r\n\r\n    public void initProcess() {\r\n        bluetoothAdvertiser.setAdvertiseData(myId, Task.ServiceEntry.serviceLookingForGroupOwner, null);\r\n        bluetoothAdvertiser.startAdvertising();\r\n        bluetoothScanner.initScan(Task.ServiceEntry.serviceLookingForGroupOwner);\r\n    }\r\n\r\n    public void active4G() {\r\n        final ConnectivityManager connectivityManager = (ConnectivityManager) connection.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkRequest.Builder req = new NetworkRequest.Builder();\r\n        req.addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);\r\n        req.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);\r\n        NetworkRequest networkRequest = req.build();\r\n        ConnectivityManager.NetworkCallback networkCallback = new\r\n                ConnectivityManager.NetworkCallback() {\r\n\r\n                    @Override\r\n                    public void onAvailable(Network network) {\r\n                        mMobileNetwork = network;\r\n                        connectivityManager.bindProcessToNetwork(network);\r\n                        connection.startVpn();\r\n                    }\r\n                };\r\n        connectivityManager.requestNetwork(networkRequest, networkCallback);\r\n    }\r\n\r\n    //GROUP OWNER IS LEAVING SO I NEED TO CONNECT TO ANOTHER ONE, WHICH ID WAS GIVEN TO ME\r\n    public void connectToGroupOwnerId(String id) {\r\n        bluetoothScanner.setClientToRequestGroupId(id);\r\n        bluetoothScanner.initScan(Task.ServiceEntry.serviceLookingForGroupOwnerWithSpecifiedId);\r\n    }\r\n\r\n    //TESTING DISCONNECTION\r\n\r\n    private ArrayList<WifiNetworkSuggestion> sugg;\r\n\r\n    public void wifiConnection(String id) {\r\n        WifiConfiguration wifiConfig = new WifiConfiguration();\r\n        wifiConfig.SSID = String.format(\"\\\"%s\\\"\", SSID+id);\r\n        wifiConfig.preSharedKey = String.format(\"\\\"%s\\\"\", networkPassword);\r\n//remember id\r\n        netId = wifiManager.addNetwork(wifiConfig);\r\n        wifiManager.disconnect();\r\n        wifiManager.enableNetwork(netId, true);\r\n        wifiManager.reconnect();\r\n        /*\r\n        WifiNetworkSuggestion suggestion = new WifiNetworkSuggestion.Builder()\r\n                .setSsid(SSID + id)\r\n                .setWpa2Passphrase(networkPassword)\r\n                .build();\r\n        sugg = new ArrayList<>();\r\n        sugg.add(suggestion);\r\n        int status = wifiManager.addNetworkSuggestions(sugg);\r\n        System.out.println(status);\r\n        if (status != WifiManager.STATUS_NETWORK_SUGGESTIONS_SUCCESS) {\r\n\r\n        }*/\r\n    }\r\n\r\n}\r\n\r\n/*\r\n    public String getMacAddr() {\r\n        try {\r\n            List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());\r\n            for (NetworkInterface nif : all) {\r\n                if (!nif.getName().equalsIgnoreCase(\"p2p0\")) continue;\r\n\r\n                byte[] macBytes = nif.getHardwareAddress();\r\n                if (macBytes == null) {\r\n                    return null;\r\n                }\r\n\r\n                StringBuilder res1 = new StringBuilder();\r\n                for (byte b : macBytes) {\r\n                    res1.append(Integer.toHexString(b & 0xFF) + \":\");\r\n                }\r\n\r\n                if (res1.length() > 0) {\r\n                    res1.deleteCharAt(res1.length() - 1);\r\n                }\r\n                return res1.toString();\r\n            }\r\n        } catch (Exception ex) {\r\n            //handle exception\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void MACSender(){\r\n        udpClient.sendGlobalMsg(\"GO_LEAVES_BYE£€\".concat(getMacAddr()));\r\n    }*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/connection/Controller/ConnectionController.java	(revision 469aefdfee658632a47ba15c87f42c21136c5d15)
+++ app/src/main/java/com/example/connection/Controller/ConnectionController.java	(date 1612733765539)
@@ -58,7 +58,6 @@
     private ServiceConnections serviceConnection;
     private BluetoothScanner bluetoothScanner;
     private BluetoothAdvertiser bluetoothAdvertiser;
-    private int netId;
     private String myId;
 
     public static Network mMobileNetwork;
@@ -69,7 +68,7 @@
         mChannel = mManager.initialize(connection, connection.getMainLooper(), null);
         this.database = database;
         this.user = user;
-        udpClient = new Multicast(user, database, this);
+        udpClient = new Multicast(user,database,this);
         tcpClient = new TCP_Client();
         wifiManager = (WifiManager) connection.getSystemService(Context.WIFI_SERVICE);
         intentFilter = new IntentFilter();
@@ -111,7 +110,7 @@
                     public void onGroupInfoAvailable(WifiP2pGroup group) {
                         //SSID=group.getNetworkName();
                         //networkPassword =group.getPassphrase();
-                        // System.out.println(group.getNetworkName() + " " + group.getPassphrase());
+                       // System.out.println(group.getNetworkName() + " " + group.getPassphrase());
                     }
                 });
                 bluetoothAdvertiser.stopAdvertising();
@@ -142,7 +141,7 @@
     //Connect to a group -----------------------------------------------------------------------------------------------------------------------------------
     public void connectToGroup(String id) {//GroupOwner groupOwner){//
         wifiConnection(id);
-        /*bluetoothAdvertiser.stopAdvertising();
+       /* bluetoothAdvertiser.stopAdvertising();
         bluetoothAdvertiser.setAdvertiseData(myId, Task.ServiceEntry.serviceClientConnectedToGroupOwner, id);
         bluetoothAdvertiser.stopAdvertising();
         udpClient.sendInfo();
@@ -152,8 +151,7 @@
     //Disconnected to a group --------------------------------------------------------------------------------------------------------------------------------
     public void disconnectToGroup() {
         wifiManager.disconnect();
-        wifiManager.removeNetwork(netId);
-        //udpClient.imLeaving();
+        udpClient.imLeaving();
     }
 
     //measure the power connection between me and the group owner --------------------------------------------------------------------------------------------------------------------------------
@@ -235,32 +233,25 @@
         bluetoothScanner.initScan(Task.ServiceEntry.serviceLookingForGroupOwnerWithSpecifiedId);
     }
 
-    //TESTING DISCONNECTION
-
-    private ArrayList<WifiNetworkSuggestion> sugg;
-
-    public void wifiConnection(String id) {
-        WifiConfiguration wifiConfig = new WifiConfiguration();
-        wifiConfig.SSID = String.format("\"%s\"", SSID+id);
-        wifiConfig.preSharedKey = String.format("\"%s\"", networkPassword);
-//remember id
-        netId = wifiManager.addNetwork(wifiConfig);
-        wifiManager.disconnect();
-        wifiManager.enableNetwork(netId, true);
-        wifiManager.reconnect();
-        /*
-        WifiNetworkSuggestion suggestion = new WifiNetworkSuggestion.Builder()
+    public void wifiConnection(String id){
+
+       WifiNetworkSuggestion suggestion = new WifiNetworkSuggestion.Builder()
                 .setSsid(SSID + id)
                 .setWpa2Passphrase(networkPassword)
                 .build();
-        sugg = new ArrayList<>();
-        sugg.add(suggestion);
-        int status = wifiManager.addNetworkSuggestions(sugg);
+        ArrayList<WifiNetworkSuggestion> sugg= new ArrayList<>();
+       sugg.add(suggestion);
+      /* int status = wifiManager.addNetworkSuggestions(sugg);
         System.out.println(status);
         if (status != WifiManager.STATUS_NETWORK_SUGGESTIONS_SUCCESS) {
 
         }*/
-    }
+        System.out.println(wifiManager.removeNetworkSuggestions(sugg));
+
+                }
+
+
+
 
 }
 
